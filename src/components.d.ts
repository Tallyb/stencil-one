/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyBasic {
        "first": string;
        "last": string;
    }
    interface MyCanvas {
        "src": string;
    }
    interface MyComplexProp {
        "values": Array<string>;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
        "updateFace": (value: string) => Promise<string>;
    }
    interface MyEvent {
    }
    interface MyFetch {
        "language": string;
    }
    interface MyHost {
        "values": Array<string>;
    }
    interface MyInput {
        "header": string;
    }
    interface MyInstance {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyNested {
        "first": string;
        "last": string;
    }
    interface MySlot {
        "values": Array<string>;
    }
}
export interface MyComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyComponentElement;
}
export interface MyEventCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyEventElement;
}
export interface MyInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyInputElement;
}
declare global {
    interface HTMLMyBasicElement extends Components.MyBasic, HTMLStencilElement {
    }
    var HTMLMyBasicElement: {
        prototype: HTMLMyBasicElement;
        new (): HTMLMyBasicElement;
    };
    interface HTMLMyCanvasElement extends Components.MyCanvas, HTMLStencilElement {
    }
    var HTMLMyCanvasElement: {
        prototype: HTMLMyCanvasElement;
        new (): HTMLMyCanvasElement;
    };
    interface HTMLMyComplexPropElement extends Components.MyComplexProp, HTMLStencilElement {
    }
    var HTMLMyComplexPropElement: {
        prototype: HTMLMyComplexPropElement;
        new (): HTMLMyComplexPropElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyEventElement extends Components.MyEvent, HTMLStencilElement {
    }
    var HTMLMyEventElement: {
        prototype: HTMLMyEventElement;
        new (): HTMLMyEventElement;
    };
    interface HTMLMyFetchElement extends Components.MyFetch, HTMLStencilElement {
    }
    var HTMLMyFetchElement: {
        prototype: HTMLMyFetchElement;
        new (): HTMLMyFetchElement;
    };
    interface HTMLMyHostElement extends Components.MyHost, HTMLStencilElement {
    }
    var HTMLMyHostElement: {
        prototype: HTMLMyHostElement;
        new (): HTMLMyHostElement;
    };
    interface HTMLMyInputElement extends Components.MyInput, HTMLStencilElement {
    }
    var HTMLMyInputElement: {
        prototype: HTMLMyInputElement;
        new (): HTMLMyInputElement;
    };
    interface HTMLMyInstanceElement extends Components.MyInstance, HTMLStencilElement {
    }
    var HTMLMyInstanceElement: {
        prototype: HTMLMyInstanceElement;
        new (): HTMLMyInstanceElement;
    };
    interface HTMLMyNestedElement extends Components.MyNested, HTMLStencilElement {
    }
    var HTMLMyNestedElement: {
        prototype: HTMLMyNestedElement;
        new (): HTMLMyNestedElement;
    };
    interface HTMLMySlotElement extends Components.MySlot, HTMLStencilElement {
    }
    var HTMLMySlotElement: {
        prototype: HTMLMySlotElement;
        new (): HTMLMySlotElement;
    };
    interface HTMLElementTagNameMap {
        "my-basic": HTMLMyBasicElement;
        "my-canvas": HTMLMyCanvasElement;
        "my-complex-prop": HTMLMyComplexPropElement;
        "my-component": HTMLMyComponentElement;
        "my-event": HTMLMyEventElement;
        "my-fetch": HTMLMyFetchElement;
        "my-host": HTMLMyHostElement;
        "my-input": HTMLMyInputElement;
        "my-instance": HTMLMyInstanceElement;
        "my-nested": HTMLMyNestedElement;
        "my-slot": HTMLMySlotElement;
    }
}
declare namespace LocalJSX {
    interface MyBasic {
        "first"?: string;
        "last"?: string;
    }
    interface MyCanvas {
        "src": string;
    }
    interface MyComplexProp {
        "values"?: Array<string>;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
        "onButtonClicked"?: (event: MyComponentCustomEvent<string>) => void;
    }
    interface MyEvent {
        "onButtonClicked"?: (event: MyEventCustomEvent<string>) => void;
    }
    interface MyFetch {
        "language": string;
    }
    interface MyHost {
        "values"?: Array<string>;
    }
    interface MyInput {
        "header"?: string;
        "onThisHappened"?: (event: MyInputCustomEvent<any>) => void;
    }
    interface MyInstance {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MyNested {
        "first"?: string;
        "last"?: string;
    }
    interface MySlot {
        "values"?: Array<string>;
    }
    interface IntrinsicElements {
        "my-basic": MyBasic;
        "my-canvas": MyCanvas;
        "my-complex-prop": MyComplexProp;
        "my-component": MyComponent;
        "my-event": MyEvent;
        "my-fetch": MyFetch;
        "my-host": MyHost;
        "my-input": MyInput;
        "my-instance": MyInstance;
        "my-nested": MyNested;
        "my-slot": MySlot;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-basic": LocalJSX.MyBasic & JSXBase.HTMLAttributes<HTMLMyBasicElement>;
            "my-canvas": LocalJSX.MyCanvas & JSXBase.HTMLAttributes<HTMLMyCanvasElement>;
            "my-complex-prop": LocalJSX.MyComplexProp & JSXBase.HTMLAttributes<HTMLMyComplexPropElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-event": LocalJSX.MyEvent & JSXBase.HTMLAttributes<HTMLMyEventElement>;
            "my-fetch": LocalJSX.MyFetch & JSXBase.HTMLAttributes<HTMLMyFetchElement>;
            "my-host": LocalJSX.MyHost & JSXBase.HTMLAttributes<HTMLMyHostElement>;
            "my-input": LocalJSX.MyInput & JSXBase.HTMLAttributes<HTMLMyInputElement>;
            "my-instance": LocalJSX.MyInstance & JSXBase.HTMLAttributes<HTMLMyInstanceElement>;
            "my-nested": LocalJSX.MyNested & JSXBase.HTMLAttributes<HTMLMyNestedElement>;
            "my-slot": LocalJSX.MySlot & JSXBase.HTMLAttributes<HTMLMySlotElement>;
        }
    }
}
